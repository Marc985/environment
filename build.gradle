import org.apache.tools.ant.taskdefs.condition.Os

plugins {
	id 'java'
	id 'org.springframework.boot' version '3.3.2'
	id 'io.spring.dependency-management' version '1.1.6'
	id 'org.openapi.generator' version '7.4.0'
}

group = 'org.event'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(22)
	}
}

repositories {
	mavenLocal()
	mavenCentral()
}

tasks.register('generateJavaClient', org.openapitools.generator.gradle.plugin.tasks.GenerateTask) {
	generatorName = "java"
	inputSpec = "$rootDir/docs/api.yml".toString()
	outputDir = "$buildDir/gen".toString()
	apiPackage = "org.event.environment.endpoint.rest.api"
	invokerPackage = "org.event.environment.endpoint.rest.client"
	modelPackage = "org.event.environment.endpoint.rest.model"

	configOptions = [
			serializableModel   : "true",
			serializationLibrary: "jackson",
			dateLibrary         : "custom"
	]
	typeMappings = [
			Date    : "java.time.LocalDate",
			DateTime: "java.time.Instant",
	]
	library = "native"

	groupId = 'org.event'
	id = 'env-api-gen'
	skipValidateSpec = false
	logToStderr = true
	generateAliasAsModel = false
	enablePostProcessFile = false
}

tasks.register('generateTsClient', org.openapitools.generator.gradle.plugin.tasks.GenerateTask) {
	generatorName = "typescript-axios"
	inputSpec = "$rootDir/docs/api.yml".toString()
	outputDir = "$buildDir/gen-ts".toString()
	typeMappings = [
			Date    : "Date",
			DateTime: "Date",
	]
	additionalProperties = [
			enumPropertyNaming: "original",
			npmName           : "@env-api/typescript-client",
			npmVersion        : project.properties["args"] ?: "latest"
	]
}

task publishJavaClientToMavenLocal(type: Exec, dependsOn: generateJavaClient) {
	if (Os.isFamily(Os.FAMILY_WINDOWS)){
		commandLine './.shell/publish_gen_to_maven_local.bat'
	} else {
		commandLine './.shell/publish_gen_to_maven_local.sh'
	}
}
tasks.compileJava.dependsOn publishJavaClientToMavenLocal

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'org.postgresql:postgresql'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
	implementation("com.amazonaws:aws-java-sdk-s3:1.12.768")
}

tasks.named('test') {
	useJUnitPlatform()
}
