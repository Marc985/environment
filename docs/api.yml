openapi: '3.0.2'
info:
  title: env API
  version: latest
servers:
  - url: http://localhost:8080

paths:
  /ping:
    get:
      tags:
        - Health
      summary: Ping pong Health endpoint
      operationId: pingPong
      responses:
        '200':
          description: pong
          content:
            text/plain:
              schema:
                type: string
                example: pong
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'

  /login:
    post:
      tags:
        - Security
      summary: Log in to access the dashboard
      operationId: login
      requestBody:
        required: true
        description: Email & Password
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Credentials'
      responses:
        '200':
          description: The JWT token for the user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '400':
          $ref: '#/components/responses/400'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'

  /users:
    get:
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/size'
      tags:
        - User
      summary: Get all users (admins)
      operationId: getUsers
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
    put:
      tags:
        - User
      summary: Crupdate users
      operationId: crupdateUsers
      requestBody:
        required: true
        description: >
          List of users to crupdate 
          Update if ID is provided, create otherwise
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/CrupdateUser'
      responses:
        '200':
          description: The crupdated users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'

  /users/{id}:
    parameters:
      - name: id
        in: path
        description: The identifier of the user
        required: true
        schema:
          type: string
    get:
      tags:
        - User
      summary: Get user by identifier
      operationId: getUserById
      responses:
        '200':
          description: The specified user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
    delete:
      tags:
        - User
      summary: Delete user by identifier
      operationId: deleteUserById
      responses:
        '200':
          description: The deleted user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/400'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'

components:
  parameters:
    page:
      name: page
      description: >
        Page number for paginated endpoints 
        Starts from 0
      in: query
      schema:
        type: number
      required: false

    size:
      name: size
      description: Number of elements per pages for paginated endpoints
      in: query
      schema:
        type: number
      required: false

  responses:
    '400':
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BadRequestException'
    '403':
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/NotAuthorizedException'
    '404':
      description: Not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ResourceNotFoundException'
    '429':
      description: Too many requests to the API
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TooManyRequestsException'
    '500':
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/InternalServerException'

  schemas:
    LoginResponse:
      properties:
        token:
          type: string
    Credentials:
      properties:
        email:
          type: string
          example: user@example.com
        password:
          type: string
    User:
      properties:
        id:
          type: string
        firstname:
          type: string
          example: john
        lastname:
          type: string
          example: john
        email:
          type: string
          example: user@example.com
        location:
          allOf:
          - $ref: '#/components/schemas/Location'
        password:
          type: string
        telephone:
          type: string
        role:
          type: string
        image:
          type: string
    CrupdateUser:
      allOf:
        - $ref: '#/components/schemas/User'
      properties:
        password:
          type: string
    Tree: 
      properties:
        id: 
          type: string
        name: 
          type: string
        description:
          type: string
        image:
          type: string
        location:
          allOf:
          - $ref: '#/components/schemas/Location'
        user: 
          allOf:
          - $ref: '#/components/schemas/User'
    Location: 
      properties:
        latitude: 
          type: string
        longitude:
          type: string


    #Exceptions

    Exception:
      type: object
      properties:
        type:
          type: string
        message:
          type: string
    BadRequestException:
      allOf:
        - $ref: '#/components/schemas/Exception'
      example:
        type: BadRequestException
        message: Bad request
    NotAuthorizedException:
      allOf:
        - $ref: '#/components/schemas/Exception'
      example:
        type: NotAuthorizedException
        message: Not authorized
    ResourceNotFoundException:
      allOf:
        - $ref: '#/components/schemas/Exception'
      example:
        type: ResourceNotFoundException
        message: Resource of type <T> identified by <I> not found
    TooManyRequestsException:
      allOf:
        - $ref: '#/components/schemas/Exception'
      example:
        type: TooManyRequestsException
        message: Too many requests
    InternalServerException:
      allOf:
        - $ref: '#/components/schemas/Exception'
      example:
        type: InternalServerException
        message: Unexpected error
